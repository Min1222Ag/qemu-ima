From 7992a12328f8054d1816b716d267200238002a30 Mon Sep 17 00:00:00 2001
From: Min1222Ag <maexc834@naver.com>
Date: Thu, 5 Jun 2025 15:13:50 +0900
Subject: [PATCH] Add TEE execution info hook and IMA fork support

---
 drivers/tee/optee/tee_send_exec_info.c | 134 ++++++++++++++++++++
 security/integrity/ima/ima_main.c      | 168 ++++++++++++++++++++++++-
 security/security.c                    | 128 +++++++++++++++++++
 3 files changed, 426 insertions(+), 4 deletions(-)
 create mode 100644 drivers/tee/optee/tee_send_exec_info.c

diff --git a/drivers/tee/optee/tee_send_exec_info.c b/drivers/tee/optee/tee_send_exec_info.c
new file mode 100644
index 000000000000..3fe563c9fab1
--- /dev/null
+++ b/drivers/tee/optee/tee_send_exec_info.c
@@ -0,0 +1,134 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/tee_drv.h>
+#include <linux/tee_core.h>
+
+#include <linux/slab.h>
+#include <linux/string.h>
+#include <linux/uuid.h>
+#include <linux/err.h>
+#include <linux/types.h>
+#include "../tee_private.h"
+#include <linux/ktime.h>
+
+
+#define PTA_CAN_ID_UUID \
+	UUID_INIT(0x12345678, 0x1111, 0x1234, \
+	          0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0)
+              
+static uuid_t can_id_uuid __maybe_unused = PTA_CAN_ID_UUID;
+
+#define PTA_CMD_REGISTER_EXEC_INFO 0
+#define TEEC_SUCCESS 0x00000000
+
+static int match_any(struct tee_ioctl_version_data *vers, const void *data)
+{
+    return true;
+}
+
+
+int tee_send_exec_info(uint32_t pid, u8 *file_hash, u32 *can_ids, u32 num_ids)
+{
+	struct tee_context *ctx;
+	struct tee_shm *shm = NULL;
+	struct tee_ioctl_open_session_arg sess_arg = { 0 };
+	struct tee_ioctl_invoke_arg inv_arg = { 0 };
+	struct tee_param param[1] = { 0 };
+	size_t shm_size;
+	u8 *shm_buf;
+	int rc;
+
+    pr_info(">>> [tee_send_exec_info] called: pid=%u, num_ids=%u\n", pid, num_ids);
+
+    //if (!file_hash || !can_ids || num_ids == 0)
+    //return -EINVAL;
+
+	/* 1. Open TEE context with TEE driver*/
+	ctx = tee_client_open_context(NULL, match_any, NULL, NULL);
+	if (IS_ERR(ctx)){
+        pr_err("Failed to open TEE context, error: %ld\n", PTR_ERR(ctx)); 
+		return PTR_ERR(ctx);
+    }
+
+    pr_info("TEE context pointer: %px\n", ctx);
+    pr_info("TEE context opened successfully\n");
+
+    if (!ctx->teedev || !ctx->teedev->desc || !ctx->teedev->desc->ops) {
+        pr_warn("TEE context opened but teedev or ops not ready\n");
+        return -ENODEV;
+        goto out_ctx;
+    }
+
+    /* 2. Open session with PTA */
+	export_uuid(sess_arg.uuid, &can_id_uuid);
+	sess_arg.clnt_login = TEE_IOCTL_LOGIN_PUBLIC;
+	sess_arg.num_params = 0;
+
+    rc = tee_client_open_session(ctx, &sess_arg, NULL);
+	if (rc < 0 || sess_arg.ret != TEEC_SUCCESS) {
+		pr_err("TEE: Failed to open session: rc=%d, ret=0x%x\n", rc, sess_arg.ret);
+		rc = rc < 0 ? rc : -EINVAL;
+		goto out_ctx;
+	}
+
+    pr_info("TEE session opened (session id: %u)\n", sess_arg.session);
+
+	/* 3. Allocate shared memory */
+    shm_size = sizeof(uint32_t) + 32 + sizeof(u32) + num_ids * sizeof(u32);
+	shm = tee_shm_alloc_kernel_buf(ctx, shm_size);
+	if (IS_ERR(shm)) {
+		pr_err("TEE: Failed to alloc SHM: %ld\n", PTR_ERR(shm));
+		rc = PTR_ERR(shm);
+		goto out_sess;
+	}
+
+    pr_info("Shared memory allocated: %zu bytes\n", shm_size);
+
+	shm_buf = tee_shm_get_va(shm, 0);
+	if (IS_ERR(shm_buf)) {
+		pr_err("TEE: Failed to get SHM VA: %ld\n", PTR_ERR(shm_buf));
+		rc = PTR_ERR(shm_buf);
+		goto out_shm;
+	}
+
+    pr_info("Copying pid, file_hash, can_ids into shared memory\n");
+	/* 4. Copy data into shared memory */
+	u8 *p = shm_buf;
+	memcpy(p, &pid, sizeof(uint32_t));
+	p += sizeof(uint32_t);
+	memcpy(p, file_hash, 32);
+	p += 32;
+	memcpy(p, &num_ids, sizeof(u32));
+	p += sizeof(u32);
+	memcpy(p, can_ids, num_ids * sizeof(u32));	
+
+
+	/* 5. Setup TEE parameters */
+	inv_arg.func = PTA_CMD_REGISTER_EXEC_INFO;
+	inv_arg.session = sess_arg.session;
+	inv_arg.num_params = 1;
+
+	param[0].attr = TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT;
+	param[0].u.memref.shm = shm;
+	param[0].u.memref.shm_offs = 0;
+	param[0].u.memref.size = shm_size;
+
+    pr_info("Invoking PTA function...\n");
+
+	/* 6. Invoke PTA function */
+	rc = tee_client_invoke_func(ctx, &inv_arg, param);
+	if (rc < 0 || inv_arg.ret != TEEC_SUCCESS) {
+		pr_err("TEE: invoke failed: rc=%d, ret=0x%x\n", rc, inv_arg.ret);
+		rc = rc < 0 ? rc : -EINVAL;
+	}
+    else{
+        pr_info("PTA invocation successful\n");
+    }
+
+out_shm:
+	tee_shm_free(shm);
+out_sess:
+	tee_client_close_session(ctx, sess_arg.session);
+out_ctx:
+	tee_client_close_context(ctx);
+	return rc;
+}
\ No newline at end of file
diff --git a/security/integrity/ima/ima_main.c b/security/integrity/ima/ima_main.c
index 06132cf47016..5f2a06fb36c1 100644
--- a/security/integrity/ima/ima_main.c
+++ b/security/integrity/ima/ima_main.c
@@ -27,9 +27,16 @@
 #include <linux/fs.h>
 #include <linux/iversion.h>
 #include <linux/evm.h>
-
 #include "ima.h"
 
+/*MODIFICATION*/
+#include <linux/types.h>   
+#include <linux/ktime.h>
+#include <linux/sched.h>
+#include <linux/sched/task.h>   
+#include <linux/ktime.h>
+extern int tee_send_exec_info(uint32_t pid, u8 *file_hash, u32 *can_ids, u32 num_ids);
+
 #ifdef CONFIG_IMA_APPRAISE
 int ima_appraise = IMA_APPRAISE_ENFORCE;
 #else
@@ -43,6 +50,7 @@ static struct notifier_block ima_lsm_policy_notifier = {
 	.notifier_call = ima_lsm_policy_change,
 };
 
+
 static int __init hash_setup(char *str)
 {
 	struct ima_template_desc *template_desc = ima_template_desc_current();
@@ -82,6 +90,7 @@ enum hash_algo ima_get_current_hash_algo(void)
 	return ima_hash_algo;
 }
 
+
 /* Prevent mmap'ing a file execute that is already mmap'ed write */
 static int mmap_violation_check(enum ima_hooks func, struct file *file,
 				char **pathbuf, const char **pathname,
@@ -205,6 +214,7 @@ static void ima_file_free(struct file *file)
 	ima_check_last_writer(iint, inode, file);
 }
 
+
 static int process_measurement(struct file *file, const struct cred *cred,
 			       u32 secid, char *buf, loff_t size, int mask,
 			       enum ima_hooks func)
@@ -381,7 +391,6 @@ static int process_measurement(struct file *file, const struct cred *cred,
 				      xattr_value, xattr_len, modsig, pcr,
 				      template_desc);
 	if (rc == 0 && (action & IMA_APPRAISE_SUBMASK)) {
-		rc = ima_check_blacklist(iint, modsig, pcr);
 		if (rc != -EPERM) {
 			inode_lock(inode);
 			rc = ima_appraise_measurement(func, iint, file,
@@ -389,10 +398,160 @@ static int process_measurement(struct file *file, const struct cred *cred,
 						      xattr_len, modsig);
 			inode_unlock(inode);
 		}
-		if (!rc)
+		if (!rc){
 			rc = mmap_violation_check(func, file, &pathbuf,
-						  &pathname, filename);
+						  &pathname, filename);}
+			
+			/*MODIFICATION : can id extraction + TEE session open*/	
+			if (func == BPRM_CHECK) {
+				ktime_t start, end;
+				s64 delta;
+			
+				start = ktime_get_ns();
+
+    			
+    			// Step 1: Check for appended CAN ID list size 
+				
+
+				loff_t fsize = i_size_read(inode);
+    			if (fsize < sizeof(uint32_t)) {
+        		pr_err("[IMA debug] File too small to contain CAN ID list\n");
+        		goto skip_tee;
+    			}
+
+				
+    			pr_info("[IMA debug] 2. Starting CAN ID list extraction\n");
+    			
+				file->f_pos = 0;
+    			uint32_t can_id_size = 0;
+    			loff_t offset = fsize - sizeof(uint32_t);
+				pr_info("[IMA debug] Reading CAN ID size from offset: %lld, file size: %lld\n", offset, fsize);
+				ssize_t r = kernel_read(file, &can_id_size, sizeof(uint32_t), &offset);
+				can_id_size = le32_to_cpu(can_id_size);
+
+    			if (r != sizeof(uint32_t)) {
+        			pr_err("[IMA debug] Failed to read CAN ID size\n");
+        			goto skip_tee;
+    			}
+
+    			char *can_id_data = kmalloc(can_id_size, GFP_KERNEL);
+    			if (!can_id_data) {
+        			pr_err("[IMA debug] Failed to alloc can_id_data\n");
+        			goto skip_tee;
+    			}
+
+    			offset = fsize - sizeof(uint32_t) - can_id_size;
+				r = kernel_read(file, can_id_data, can_id_size, &offset);
+    			if (r != can_id_size) {
+        			pr_err("[IMA debug] Failed to read CAN ID data\n");
+        			kfree(can_id_data);
+        			goto skip_tee;
+    			}
+
+				if(can_id_size == 0){
+					pr_info("[IMA debug] No CAN ID detected\n");
+					kfree(can_id_data);
+        			goto skip_tee;
+				}
+			
+    			pr_info("[IMA debug] 3. CAN ID list extraction completed (%u bytes)\n", can_id_size);
+
+    			// Step 2: Prepare hash of the full merged file 
+				offset = 0;
+				ssize_t read_len;
+				uint8_t *file_buf = kmalloc(fsize, GFP_KERNEL);
+				if (!file_buf) {
+    				pr_err("[IMA debug] Failed to alloc file_buf for hash\n");
+    				kfree(can_id_data);
+    				goto skip_tee;
+				}
+
+				read_len = kernel_read(file, file_buf, fsize, &offset);
+				if (read_len != fsize) {
+    				pr_err("[IMA debug] Failed to read full merged file (read=%zd)\n", read_len);
+    				kfree(file_buf);
+    				kfree(can_id_data);
+    				goto skip_tee;
+				}
+
+				u8 merged_hash[SHA256_DIGEST_SIZE];
+				struct crypto_shash *tfm = crypto_alloc_shash("sha256", 0, 0);
+				if (IS_ERR(tfm)) {
+    				pr_err("[IMA debug] Failed to alloc sha256 tfm\n");
+    				kfree(file_buf);
+    				kfree(can_id_data);
+    				goto skip_tee;
+				}
+
+				struct shash_desc *desc = kmalloc(sizeof(*desc) + crypto_shash_descsize(tfm), GFP_KERNEL);
+				if (!desc) {
+					pr_err("[IMA debug] Failed to alloc shash_desc\n");
+					crypto_free_shash(tfm);
+					kfree(file_buf);
+					kfree(can_id_data);
+					goto skip_tee;
+				}
+
+				desc->tfm = tfm;
+
+				if (crypto_shash_init(desc) ||
+				crypto_shash_update(desc, file_buf, fsize) ||
+				crypto_shash_final(desc, merged_hash)) {
+				pr_err("[IMA debug] SHA256 computation failed\n");
+				kfree(desc);
+				crypto_free_shash(tfm);
+				kfree(file_buf);
+				kfree(can_id_data);
+				goto skip_tee;
+				}			
+
+				kfree(desc);
+				crypto_free_shash(tfm);
+				kfree(file_buf);
+
+				/*
+				// Step 3: Prepare Secure World message 
+    			struct exec_info_msg {
+        			uint32_t pid;
+        			u8 file_hash[32];
+        			u32 can_id_len;
+        			uint32_t can_ids[];
+    			};
+				
+    			size_t msg_len = sizeof(struct exec_info_msg) + can_id_size;
+    			struct exec_info_msg *msg = kmalloc(msg_len, GFP_KERNEL);
+    			if (!msg) {
+        			pr_err("[IMA debug] Failed to alloc exec_info_msg\n");
+        			kfree(can_id_data);
+        			goto skip_tee;
+    			}
+					
+				msg->pid = current->pid;
+				msg->can_id_len = can_id_size;
+    			memcpy(msg->file_hash, merged_hash, 32);
+    			memcpy(msg->can_ids, can_id_data, can_id_size);
+
+    			pr_info("[IMA debug] 5. TEE session opened and exec_info_msg prepared for pid=%d\n", msg->pid);
+
+    			// Step 4: Send to TEE 
+    			tee_send_exec_info(msg->pid, msg->file_hash, (u32 *)msg->can_ids, msg->can_id_len / sizeof(u32));
+
+    			kfree(msg);
+    			kfree(can_id_data);
+			*/
+				end = ktime_get_ns();
+    			delta = end - start;
+				pr_info(">>> [measure] IMA executionoverhead: %lld ns\n", delta);
+
+			skip_tee:
+    			;
+				} 
+		rc = ima_check_blacklist(iint, modsig, pcr);
+		/*MODIFICATION ENDS HERE*/
+		
 	}
+
+	
 	if (action & IMA_AUDIT)
 		ima_audit_measurement(iint, pathname);
 
@@ -465,6 +624,7 @@ static int ima_file_mmap(struct file *file, unsigned long reqprot,
 	return 0;
 }
 
+
 /**
  * ima_file_mprotect - based on policy, limit mprotect change
  * @vma: vm_area_struct protection is set to
diff --git a/security/security.c b/security/security.c
index 045dd716e340..cfe507c1a09d 100644
--- a/security/security.c
+++ b/security/security.c
@@ -33,6 +33,21 @@
 #include <net/flow.h>
 #include <net/sock.h>
 
+//MODIFICATION
+#include <linux/binfmts.h>
+#include <linux/types.h>
+#include <crypto/hash.h>
+#include <linux/ktime.h>
+#include <linux/printk.h>
+
+extern int extract_canid_and_hash_from_file(struct file *file, u8 *can_ids_out, u8 *hash_out, u32 *can_id_len_out);
+extern void tee_send_exec_info(uint32_t pid, u8 *hash, u32 *can_ids, u32 num_ids);
+static struct lsm_id my_lsm_id = {
+    .name = "my_lsm",
+    .id = 99, 
+};
+
+
 #define SECURITY_HOOK_ACTIVE_KEY(HOOK, IDX) security_hook_active_##HOOK##_##IDX
 
 /*
@@ -5986,3 +6001,116 @@ void security_initramfs_populated(void)
 {
 	call_void_hook(initramfs_populated);
 }
+
+//MODIFICATION
+int extract_canid_and_hash_from_file(struct file *file, u8 *can_ids_out, u8 *hash_out, u32 *can_id_len_out)
+{
+    loff_t fsize = i_size_read(file_inode(file));
+    if (fsize < sizeof(u32)) return -EINVAL;
+
+    loff_t offset = fsize - sizeof(u32);
+    u32 can_id_size;
+    ssize_t r = kernel_read(file, &can_id_size, sizeof(u32), &offset);
+    if (r != sizeof(u32)) return -EIO;
+
+    can_id_size = le32_to_cpu(can_id_size);
+    if (can_id_size == 0 || can_id_size > 256) return -EINVAL;
+
+    offset = fsize - sizeof(u32) - can_id_size;
+    r = kernel_read(file, can_ids_out, can_id_size, &offset);
+    if (r != can_id_size) return -EIO;
+
+    *can_id_len_out = can_id_size;
+
+    // Hash 계산
+    u8 *buf = kmalloc(fsize, GFP_KERNEL);
+    if (!buf) return -ENOMEM;
+
+    offset = 0;
+    r = kernel_read(file, buf, fsize, &offset);
+    if (r != fsize) {
+        kfree(buf);
+        return -EIO;
+    }
+
+    struct crypto_shash *tfm = crypto_alloc_shash("sha256", 0, 0);
+    if (IS_ERR(tfm)) {
+        kfree(buf);
+        return PTR_ERR(tfm);
+    }
+
+    struct shash_desc *desc = kmalloc(sizeof(*desc) + crypto_shash_descsize(tfm), GFP_KERNEL);
+    if (!desc) {
+        crypto_free_shash(tfm);
+        kfree(buf);
+        return -ENOMEM;
+    }
+
+    desc->tfm = tfm;
+
+    crypto_shash_init(desc);
+    crypto_shash_update(desc, buf, fsize);
+    crypto_shash_final(desc, hash_out);
+
+    kfree(desc);
+    crypto_free_shash(tfm);
+    kfree(buf);
+
+    return 0;
+}
+
+
+static int my_task_alloc(struct task_struct *task, unsigned long clone_flags)
+{
+    struct file *exe_file;
+    u8 can_ids[256];
+    u8 hash[32];
+    u32 can_id_len = 0;
+    int ret;
+
+	ktime_t start, end;
+    s64 delta;
+
+    start = ktime_get_ns();
+
+	if (!current || !current->mm)
+    	return 0;
+
+    exe_file = get_mm_exe_file(current->mm);
+	
+    if (!exe_file)
+        return 0;
+	
+    ret = extract_canid_and_hash_from_file(exe_file, can_ids, hash, &can_id_len);
+    fput(exe_file);
+
+    if (ret != 0 || can_id_len == 0)
+        return 0;
+
+    u32 num_ids = can_id_len / sizeof(u32);
+
+    tee_send_exec_info(task->pid, hash, (u32 *)can_ids, num_ids);
+
+	end = ktime_get_ns();
+    delta = end - start;
+	pr_info(">>> [measure] fork + task_alloc hook overhead: %lld ns\n", delta);
+
+    return 0;
+}
+
+static struct security_hook_list my_hooks[] = {
+    LSM_HOOK_INIT(task_alloc, my_task_alloc),
+};
+
+
+static __init int my_lsm_init(void)
+{
+    pr_info("my_lsm: init\n");
+    security_add_hooks(my_hooks, ARRAY_SIZE(my_hooks), &my_lsm_id);
+    return 0;
+}
+
+DEFINE_LSM(my_lsm) = {
+    .name = "my_lsm",
+    .init = my_lsm_init,
+};
-- 
2.34.1

